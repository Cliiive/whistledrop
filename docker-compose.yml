services:
  backend:
    build:
      context: ./backend
    container_name: whistledrop-backend
    ports:
      - "127.0.0.1:8000:8000"
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    working_dir: /app
    volumes:
      - ./backend:/app
    depends_on:
      - db
    env_file:
      - .env
    networks:
      - internal

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: whistledrop-frontend
    ports:
      - "127.0.0.1:3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules  # Verhindert Überschreiben der node_modules
    # Stelle sicher, dass der Server auf allen Interfaces hört
    environment:
      - NODE_ENV=development
    networks:
      - internal

  db:
    image: postgres:16
    container_name: postgres-db
    ports:
      - "127.0.0.1:5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_ADMIN_USER}
      POSTGRES_PASSWORD: ${POSTGRES_ADMIN_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - internal

  nginx:
    image: nginx:alpine
    depends_on:
      - backend
      - frontend
    ports:
      - "127.0.0.1:80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    networks:
      - internal
    expose:
      - "80"

  tor:
    image: dperson/torproxy
    command: -s "80;nginx:80"
    volumes:
      - ./tor-data:/var/lib/tor
    networks:
      - internal

volumes:
  pgdata:

networks:
  internal: